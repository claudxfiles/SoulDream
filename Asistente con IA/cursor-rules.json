{
  "version": 1,
  "rules": [
    {
      "name": "SoulDream AI Assistant Integration",
      "description": "Guía principal para integrar un asistente de IA en SoulDream",
      "patterns": ["**/*.tsx", "**/*.ts", "**/*.js", "**/*.jsx", "**/*.css"],
      "instructions": "Estás ayudando a integrar un asistente de IA avanzado en la aplicación SoulDream. Esta aplicación es un SaaS con frontend, backend, y usa Supabase como base de datos.\n\nEl asistente de IA debe tener las siguientes características principales:\n\n1. Interfaz de chat para comunicarse con los usuarios\n2. Capacidad para rastrear y gestionar objetivos y tareas\n3. Análisis de patrones para identificar comportamientos del usuario\n4. Adaptación al aprendizaje basada en preferencias del usuario\n5. Generación de planes personalizados\n\nLa integración debe seguir estos principios:\n\n1. Mantener la coherencia con el diseño y la estructura de código existente\n2. Integrarse con los sistemas de autenticación y autorización existentes\n3. Utilizar la base de datos Supabase para almacenar conversaciones, objetivos y preferencias\n4. Ser modular y mantenible\n5. Seguir las mejores prácticas de rendimiento y seguridad\n\nEl asistente se conectará a una API de IA (como OpenAI o similar) para proporcionar respuestas inteligentes y contextualmente relevantes."
    },
    {
      "name": "Frontend Integration",
      "description": "Guía para integrar el componente de asistente de IA en el frontend",
      "patterns": ["**/frontend/**/*.tsx", "**/frontend/**/*.ts", "**/frontend/**/*.jsx", "**/frontend/**/*.js"],
      "instructions": "Al integrar el asistente de IA en el frontend de SoulDream, sigue estas pautas:\n\n1. Crea componentes modulares para el asistente de IA:\n   - AIAssistant: Componente principal que contiene la interfaz de chat\n   - ChatMessage: Componente para mostrar mensajes individuales\n   - GoalIntegration: Componente para mostrar y gestionar objetivos y tareas\n   - PatternAnalyzer: Componente para mostrar análisis de patrones de comportamiento\n   - PersonalizedPlanner: Componente para generar y mostrar planes personalizados\n\n2. Ubica estos componentes en la carpeta de componentes adecuada, siguiendo la estructura existente del proyecto\n\n3. Utiliza los componentes UI existentes (botones, inputs, cards, etc.) para mantener la coherencia visual\n\n4. Integra el asistente en la interfaz de usuario existente, ya sea como:\n   - Un panel lateral que se puede expandir/contraer\n   - Una ventana modal que se puede abrir desde un botón persistente\n   - Una página dedicada accesible desde la navegación principal\n\n5. Asegúrate de que la interfaz sea responsiva y funcione bien en dispositivos móviles\n\n6. Implementa animaciones suaves para transiciones como la aparición de nuevos mensajes\n\n7. Incluye indicadores de estado (cargando, enviando mensaje, etc.)\n\n8. Considera la accesibilidad en todos los componentes"
    },
    {
      "name": "Backend Integration",
      "description": "Guía para integrar el asistente de IA con el backend",
      "patterns": ["**/backend/**/*.ts", "**/backend/**/*.js"],
      "instructions": "Para la integración del asistente de IA con el backend de SoulDream:\n\n1. Crea endpoints API para:\n   - Procesar mensajes de usuario y generar respuestas\n   - Guardar y recuperar conversaciones\n   - Gestionar objetivos y tareas\n   - Almacenar y recuperar preferencias de usuario\n   - Generar planes personalizados\n\n2. Implementa integración con servicios de IA (como OpenAI API):\n   - Configura la autenticación segura con la API externa\n   - Implementa lógica para enviar contexto relevante a la API\n   - Procesa y formatea las respuestas para la interfaz de usuario\n\n3. Implementa caching donde sea apropiado para mejorar el rendimiento\n\n4. Asegura que todos los endpoints estén protegidos con autenticación adecuada\n\n5. Implementa manejo de errores robusto y envía respuestas de error informativas\n\n6. Configura limitación de tasa (rate limiting) para evitar abuso\n\n7. Considera la escalabilidad de la solución"
    },
    {
      "name": "Supabase Integration",
      "description": "Guía para integrar el asistente de IA con Supabase",
      "patterns": ["**/supabase/**/*", "**/frontend/**/supabase*.ts", "**/backend/**/supabase*.ts"],
      "instructions": "Para la integración con Supabase:\n\n1. Diseña e implementa las tablas necesarias para el asistente de IA:\n   - conversations: almacena historial de conversaciones\n   - messages: almacena mensajes individuales dentro de conversaciones\n   - ai_goals: almacena objetivos generados o proporcionados por el usuario\n   - ai_tasks: almacena tareas relacionadas con los objetivos\n   - ai_preferences: almacena preferencias de aprendizaje y personalización\n   - ai_patterns: almacena patrones de comportamiento identificados\n\n2. Configura las relaciones entre estas tablas y las tablas existentes (como users)\n\n3. Implementa políticas RLS (Row Level Security) para garantizar que los usuarios solo puedan acceder a sus propios datos\n\n4. Crea funciones SQL o Edge Functions para operaciones complejas\n\n5. Configura webhooks si es necesario para procesar eventos en tiempo real\n\n6. Optimiza las consultas para un rendimiento eficiente\n\n7. Implementa índices apropiados para mejorar la velocidad de búsqueda\n\n8. Configura backups regulares para estos datos"
    },
    {
      "name": "Hooks y Context",
      "description": "Guía para implementar hooks y contexto para el asistente de IA",
      "patterns": ["**/hooks/*.ts", "**/hooks/*.tsx", "**/context/*.ts", "**/context/*.tsx"],
      "instructions": "Para implementar los hooks y context del asistente de IA:\n\n1. Crea un hook principal useAIAssistant que proporcione:\n   - Estado para mensajes y conversaciones\n   - Estado para objetivos y tareas\n   - Estado para preferencias de usuario\n   - Funciones para enviar mensajes\n   - Funciones para gestionar objetivos y tareas\n   - Funciones para actualizar preferencias\n\n2. Implementa un contexto React (AIAssistantContext) para compartir el estado y las funciones en toda la aplicación\n\n3. Usa useCallback para funciones y useMemo para cálculos costosos\n\n4. Implementa manejo de estado de carga y errores\n\n5. Considera la persistencia de estado (localStorage, sessionStorage) para experiencia mejorada\n\n6. Separa la lógica de negocio de la lógica de presentación\n\n7. Documenta claramente las funciones y tipos exportados"
    },
    {
      "name": "TypeScript Types",
      "description": "Guía para implementar tipos TypeScript para el asistente de IA",
      "patterns": ["**/*.ts", "**/*.tsx"],
      "instructions": "Al implementar los tipos TypeScript para el asistente de IA:\n\n1. Define interfaces claras para todas las entidades:\n\n```typescript\nexport interface Message {\n  id: string;\n  content: string;\n  role: 'user' | 'assistant' | 'system';\n  timestamp: Date;\n}\n\nexport interface Conversation {\n  id: string;\n  title: string;\n  messages: Message[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Goal {\n  id: string;\n  title: string;\n  description: string;\n  status: 'pending' | 'in-progress' | 'completed';\n  createdAt: Date;\n  dueDate?: Date;\n}\n\nexport interface Task {\n  id: string;\n  goalId: string;\n  title: string;\n  description?: string;\n  status: 'pending' | 'in-progress' | 'completed';\n  createdAt: Date;\n  dueDate?: Date;\n}\n\nexport interface UserPreference {\n  id: string;\n  category: string;\n  value: string;\n}\n\nexport interface AIContext {\n  goals: Goal[];\n  tasks: Task[];\n  preferences: UserPreference[];\n  userProfile?: {\n    name?: string;\n    interests?: string[];\n    strengths?: string[];\n    weaknesses?: string[];\n  };\n}\n```\n\n2. Utiliza tipos para props de componentes\n\n3. Define tipos para respuestas de API\n\n4. Utiliza enums para valores constantes\n\n5. Considera el uso de tipos genéricos para funciones reutilizables\n\n6. Mantén los tipos sincronizados con el esquema de la base de datos"
    },
    {
      "name": "Integration Testing",
      "description": "Guía para probar la integración del asistente de IA",
      "patterns": ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "**/*.spec.tsx"],
      "instructions": "Para probar la integración del asistente de IA:\n\n1. Escribe pruebas unitarias para:\n   - Componentes UI\n   - Hooks personalizados\n   - Funciones de utilidad\n   - Transformaciones de datos\n\n2. Implementa pruebas de integración para:\n   - Flujos de usuario completos\n   - Interacciones entre componentes\n   - Integración frontend-backend\n\n3. Considera el uso de mocks para servicios externos (API de IA)\n\n4. Prueba escenarios de error y casos límite\n\n5. Configura pruebas automatizadas como parte del flujo de CI/CD"
    },
    {
      "name": "Seguridad",
      "description": "Consideraciones de seguridad para la integración del asistente de IA",
      "patterns": ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"],
      "instructions": "Consideraciones de seguridad importantes:\n\n1. Nunca almacenes claves API en el código frontend\n\n2. Implementa sanitización de entrada para todos los datos de usuario enviados al asistente\n\n3. Utiliza HTTPS para todas las comunicaciones\n\n4. Implementa autenticación y autorización adecuadas para todos los endpoints\n\n5. Considera limitaciones en la longitud y frecuencia de las solicitudes\n\n6. Implementa políticas de RLS en Supabase para proteger datos\n\n7. Considera la privacidad de los datos y las regulaciones (GDPR, CCPA)\n\n8. Implementa logging adecuado sin exponer información sensible"
    }
  ]
}
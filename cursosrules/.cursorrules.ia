# Landing Page Factory - Template Estándar
```tsx
// components/chat/VectalChat.tsx
import React, { useState, useRef, useEffect } from 'react';
import { Send, Mic, ChevronUp } from 'lucide-react';
import { useSupabase } from '@/hooks/useSupabase';
import { useRouter } from 'next/navigation';

interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
}

export function VectalChat() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { supabase, user } = useSupabase();
  const router = useRouter();

  // Función para añadir un mensaje al chat
  const addMessage = (content: string, role: 'user' | 'assistant') => {
    const newMessage: Message = {
      id: crypto.randomUUID(),
      content,
      role,
      timestamp: new Date(),
    };
    setMessages(prev => [...prev, newMessage]);
  };

  // Función para enviar un mensaje
  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;
    
    const userMessage = inputMessage;
    setInputMessage('');
    addMessage(userMessage, 'user');
    
    setIsLoading(true);
    try {
      // Aquí implementarías la llamada a tu API de IA
      // Por ejemplo:
      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: userMessage }),
      });
      
      const data = await response.json();
      addMessage(data.response, 'assistant');
    } catch (error) {
      console.error('Error al enviar mensaje:', error);
      addMessage('Lo siento, ha ocurrido un error al procesar tu mensaje.', 'assistant');
    } finally {
      setIsLoading(false);
    }
  };

  // Auto-scroll al último mensaje
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Manejar tecla Enter para enviar
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="flex flex-col h-full bg-[#1A1A1A] text-white">
      {/* Header del chat */}
      <div className="flex items-center justify-center py-4 border-b border-white/10">
        <div className="flex items-center space-x-2">
          <div className="w-8 h-8">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="w-full h-full">
              <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              <path d="M2 17L12 22L22 17" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              <path d="M2 12L12 17L22 12" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </div>
          <h2 className="text-xl font-medium">What can I help with?</h2>
        </div>
      </div>

      {/* Área de mensajes */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.length === 0 && (
          <div className="flex flex-col items-center justify-center h-full text-gray-400">
            <div className="w-16 h-16 mb-4">
              <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="w-full h-full">
                <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M2 17L12 22L22 17" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M2 12L12 17L22 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </div>
            <p className="text-lg">Pregúntame cualquier cosa...</p>
          </div>
        )}

        {messages.map((message) => (
          <div 
            key={message.id} 
            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div 
              className={`max-w-[80%] rounded-lg px-4 py-2 ${
                message.role === 'user' 
                  ? 'bg-[#2A2A2A] text-white' 
                  : 'bg-[#3A3A3A] text-gray-100'
              }`}
            >
              <p className="whitespace-pre-wrap">{message.content}</p>
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-[#3A3A3A] rounded-lg px-4 py-2 max-w-[80%]">
              <div className="flex space-x-2">
                <div className="w-2 h-2 rounded-full bg-gray-400 animate-pulse"></div>
                <div className="w-2 h-2 rounded-full bg-gray-400 animate-pulse delay-150"></div>
                <div className="w-2 h-2 rounded-full bg-gray-400 animate-pulse delay-300"></div>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input para escribir */}
      <div className="border-t border-white/10 p-4">
        <div className="relative flex items-center">
          <textarea
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="Message Vectal..."
            className="w-full bg-[#2A2A2A] text-gray-200 rounded-md py-3 px-4 pr-12 focus:outline-none focus:ring-1 focus:ring-white/20 resize-none"
            rows={1}
          />
          <div className="absolute right-2 flex space-x-2">
            <button 
              className="text-gray-400 hover:text-white p-1"
              onClick={() => {/* Implementar función de micrófono */}}
            >
              <Mic size={20} />
            </button>
            <button 
              className="text-gray-400 hover:text-white p-1"
              onClick={handleSendMessage}
              disabled={isLoading || !inputMessage.trim()}
            >
              {isLoading ? (
                <div className="w-5 h-5 border-2 border-gray-400 border-t-white rounded-full animate-spin"></div>
              ) : (
                <Send size={20} />
              )}
            </button>
          </div>
        </div>
        <div className="flex justify-between items-center mt-2 text-xs text-gray-500">
          <div className="flex items-center space-x-2">
            <span className="px-2 py-1 bg-[#2A2A2A] rounded">Llama 4 Scout</span>
            <span>•</span>
            <span className="px-2 py-1 bg-[#2A2A2A] rounded">Agent</span>
          </div>
          <button className="px-3 py-1 rounded-md hover:bg-[#2A2A2A] flex items-center space-x-1">
            <span>Ultra Search</span>
            <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M10 6.5C10 8.433 8.433 10 6.5 10C4.567 10 3 8.433 3 6.5C3 4.567 4.567 3 6.5 3C8.433 3 10 4.567 10 6.5ZM9.30884 10.0159C8.53901 10.6318 7.56251 11 6.5 11C4.01472 11 2 8.98528 2 6.5C2 4.01472 4.01472 2 6.5 2C8.98528 2 11 4.01472 11 6.5C11 7.56251 10.6318 8.53901 10.0159 9.30884L12.8536 12.1464C13.0488 12.3417 13.0488 12.6583 12.8536 12.8536C12.6583 13.0488 12.3417 13.0488 12.1464 12.8536L9.30884 10.0159Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
}
```



Ahora, vamos a crear la página que contendrá este chat, con un diseño similar al que mostraste en la imagen:

```tsx
// app/chat/page.tsx
'use client';

import { useState } from 'react';
import { VectalChat } from '@/components/chat/VectalChat';
import { TaskList } from '@/components/task/TaskList';
import { PlusIcon, MoreVertical, BellIcon } from 'lucide-react';
import Link from 'next/link';

export default function ChatPage() {
  const [showTasks, setShowTasks] = useState(true);
  
  return (
    <div className="flex h-screen bg-[#1A1A1A]">
      {/* Sidebar izquierda - puede tener navegación u otras opciones */}
      <div className="w-16 border-r border-white/10 flex flex-col items-center py-4">
        <Link href="/dashboard" className="w-8 h-8 bg-[#FF6B00] rounded-full flex items-center justify-center text-white mb-8">
          C
        </Link>
        
        <button className="w-8 h-8 rounded-full text-white hover:bg-white/10 flex items-center justify-center">
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="w-5 h-5">
            <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            <path d="M2 17L12 22L22 17" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            <path d="M2 12L12 17L22 12" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </button>
      </div>
      
      {/* Área principal */}
      <div className="flex-1 flex h-full">
        {/* Chat principal */}
        <div className="flex-1 overflow-hidden">
          <VectalChat />
        </div>
        
        {/* Panel de tareas (derecha) */}
        {showTasks && (
          <div className="w-[400px] border-l border-white/10 bg-[#1A1A1A] text-white overflow-y-auto">
            <div className="flex items-center justify-between p-4 border-b border-white/10">
              <div className="flex items-center space-x-2">
                <h2 className="text-xl font-medium">vectal.ai</h2>
                <button className="text-gray-400 hover:text-white">
                  <PlusIcon size={20} />
                </button>
                <button className="text-gray-400 hover:text-white">
                  <MoreVertical size={20} />
                </button>
              </div>
              <button className="text-gray-400 hover:text-white">
                <BellIcon size={20} />
              </button>
            </div>
            
            <div className="p-4">
              <div className="mb-4">
                <button className="text-gray-400 hover:text-white text-sm flex items-center">
                  all tasks
                  <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" className="ml-1">
                    <path d="M4.18179 6.18181C4.35753 6.00608 4.64245 6.00608 4.81819 6.18181L7.49999 8.86362L10.1818 6.18181C10.3575 6.00608 10.6424 6.00608 10.8182 6.18181C10.9939 6.35755 10.9939 6.64247 10.8182 6.81821L7.81819 9.81821C7.73379 9.9026 7.61934 9.95001 7.49999 9.95001C7.38064 9.95001 7.26618 9.9026 7.18179 9.81821L4.18179 6.81821C4.00605 6.64247 4.00605 6.35755 4.18179 6.18181Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
                  </svg>
                </button>
              </div>
              
              <TaskList />
              
              <div className="mt-4 text-[10px] text-gray-500 text-right">
                v.51
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
```

Ahora creemos el componente TaskList para mostrar las tareas:
```tsx
// components/task/TaskList.tsx
import React from 'react';
import { CircleIcon, Star } from 'lucide-react';

interface Task {
  id: string;
  title: string;
  completed: boolean;
  starred?: boolean;
  category?: string;
}

export function TaskList() {
  // Datos de ejemplo, en producción vendrían de tu API o Supabase
  const tasks: Task[] = [
    { id: '1', title: 'cursor', completed: false, starred: true, category: 'future' },
    { id: '2', title: 'Crear PYME: ALCAMAN PAISAJISMO', completed: false },
    { id: '3', title: 'Remember: The more tasks you have, the better Vectal gets.', completed: false, starred: true },
  ];

  return (
    <div className="space-y-6">
      {tasks.map((task) => (
        <div key={task.id} className="group">
          <div className="flex items-start space-x-2">
            <button className="mt-1 flex-shrink-0 w-5 h-5 rounded-full border border-gray-500 flex items-center justify-center group-hover:border-white/60">
              {task.completed ? (
                <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
                </svg>
              ) : (
                <CircleIcon className="w-3 h-3 text-transparent group-hover:text-gray-500" />
              )}
            </button>
            <div className="flex-1">
              <div className="flex items-start justify-between">
                <p className={`text-sm ${task.completed ? 'line-through text-gray-500' : 'text-gray-200'}`}>
                  {task.title}
                </p>
                {task.starred && (
                  <Star className="w-4 h-4 text-yellow-400 flex-shrink-0 ml-2" fill="currentColor" />
                )}
              </div>
              {task.category && (
                <p className="text-xs text-gray-500 mt-1">{task.category}</p>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}
```

Ahora, vamos a implementar la API para manejar las solicitudes del chat. Para esto, necesitamos crear un endpoint en Next.js:
```tsx
// app/api/ai/chat/route.ts
import { NextResponse } from 'next/server';
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';

// Función para simular una respuesta de IA (en producción, conectarías con OpenAI o similar)
async function generateAIResponse(message: string): Promise<string> {
  // Simulación de latencia
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Respuestas simples para demostración
  if (message.toLowerCase().includes('hola') || message.toLowerCase().includes('hello')) {
    return '¡Hola! ¿En qué puedo ayudarte hoy?';
  }
  
  if (message.toLowerCase().includes('tarea') || message.toLowerCase().includes('task')) {
    return 'Puedo ayudarte a organizar tus tareas. ¿Quieres crear una nueva tarea?';
  }
  
  if (message.toLowerCase().includes('ayuda') || message.toLowerCase().includes('help')) {
    return 'Soy tu asistente personal. Puedo ayudarte con:\n- Organización de tareas\n- Responder preguntas\n- Generar ideas\n¿En qué te gustaría que te ayude?';
  }
  
  return `He recibido tu mensaje: "${message}". ¿En qué más puedo ayudarte?`;
}

export async function POST(req: Request) {
  try {
    // Verificar autenticación (opcional, depende de tu app)
    const supabase = createRouteHandlerClient({ cookies });
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session) {
      return NextResponse.json(
        { error: 'No autenticado' },
        { status: 401 }
      );
    }
    
    // Procesar el mensaje
    const { message } = await req.json();
    
    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Mensaje inválido' },
        { status: 400 }
      );
    }
    
    // Generar respuesta (aquí integrarías con OpenAI u otro modelo)
    const response = await generateAIResponse(message);
    
    // Opcional: guardar la conversación en Supabase
    await supabase
      .from('conversations')
      .insert({
        user_id: session.user.id,
        user_message: message,
        ai_response: response,
      });
    
    return NextResponse.json({ response });
  } catch (error) {
    console.error('Error en chat API:', error);
    return NextResponse.json(
      { error: 'Error al procesar el mensaje' },
      { status: 500 }
    );
  }
}
```

# Finalmente, vamos a agregar un enlace al chat en el layout principal de la aplicación:
```tsx
// En tu archivo de navegación o sidebar
<Link 
  href="/chat" 
  className="flex items-center p-2 hover:bg-gray-800 rounded-md transition-colors"
>
  <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="w-5 h-5 mr-2">
    <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
    <path d="M2 17L12 22L22 17" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
    <path d="M2 12L12 17L22 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
  <span>Vectal AI Chat</span>
</Link>
```

Este es un chat similar al de Vectal.ai como pediste, con:

Una interfaz oscura y minimalista
Logo de diamante similar al de Vectal
Área de mensajes con indicador de escritura
Input para enviar mensajes con botones para micrófono y envío
Panel lateral para tareas (como se muestra en tu imagen)
Indicadores de modelo (Llama 4 Scout) y funcionalidad (Agent)
Botón de Ultra Search
Para una implementación completa en producción, deberías:

Integrar con un modelo de IA real (OpenAI, Claude, Mistral, etc.)
Guardar y recuperar el historial de conversaciones de Supabase
Implementar la funcionalidad completa del panel de tareas
Añadir capacidades de búsqueda avanzada (Ultra Search)
Implementar reconocimiento de voz para el botón del micrófono
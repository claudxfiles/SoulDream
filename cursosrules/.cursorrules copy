# Módulo Central: Asistente IA y Gestión de Tareas Integrado para SoulDream

## Objetivo del Módulo:

Crear una interfaz intuitiva y potente que permita a los usuarios interactuar con el asistente de IA para la gestión de sus metas y tareas directamente dentro de la plataforma SoulDream, utilizando un diseño de pantalla dividida para optimizar la productividad.

## Panel Izquierdo: Interfaz de Chat Inteligente (`frontend/src/components/ai-chat/AiChatPanel.tsx`)

```typescript jsx
// @.cursorrules.ia: Crea un componente funcional de React llamado AiChatPanel dentro del directorio frontend/src/components/ai-chat/.
// @.cursorrules.ia: Utiliza Tailwind CSS para aplicar estilos. El componente debe tener un fondo oscuro (#0f172a - del tema Dark de SoulDream) y texto blanco (#f8fafc - del tema light de SoulDream, para contraste).
// @.cursorrules.ia: Asegura una altura del 100% del contenedor padre para este panel.
// @.cursorrules.ia: Implementa un encabezado con el logo minimalista de SoulDream (simula con un texto o un círculo con gradiente de azul a verde por ahora, ya que el asset real se integrará después) y un título descriptivo como "Asistente Inteligente SoulDream". El encabezado debe tener un borde inferior sutil (ej., border-b border-neutral-800).
// @.cursorrules.ia: Crea un cuerpo de chat donde se mostrarán las conversaciones. Inicialmente, muestra un mensaje de bienvenida del asistente con un texto como "Hola, ¿en qué puedo ayudarte hoy con tus metas y tareas?". Utiliza un estilo diferenciado para los mensajes del usuario y del asistente (ej., burbujas de chat con diferentes fondos). Este cuerpo debe ser scrollable y ocupar el espacio vertical restante (flex-grow).
// @.cursorrules.ia: Implementa un pie de chat con un área de entrada de texto (placeholder "Escribe tu consulta...", fondo #1e293b, texto blanco, bordes redondeados) y un botón de enviar (color primario #4f46e5, texto blanco, icono de enviar de Lucide Icons).
// @.cursorrules.ia: Considera un diseño responsive para que este panel se adapte bien a diferentes tamaños de pantalla.
// @.cursorrules.ia: Modula la funcionalidad de cada sección (encabezado, cuerpo, pie) en subcomponentes si es necesario para una mejor organización.
// @.cursorrules.ia: Documenta con comentarios claros la estructura y el propósito de cada parte del componente.
Panel Derecho: Gestión de Tareas Inteligente (frontend/src/components/ai-chat/TaskManagementPanel.tsx)
```
```TypeScript

// @.cursorrules.ia: Crea un componente funcional de React llamado TaskManagementPanel dentro del directorio frontend/src/components/ai-chat/.
// @.cursorrules.ia: Utiliza Tailwind CSS para aplicar estilos. El componente debe tener un fondo claro (#f8fafc - del tema light de SoulDream) y texto oscuro (#0f172a - del tema Dark de SoulDream).
// @.cursorrules.ia: Asegura una altura del 100% del contenedor padre para este panel.
// @.cursorrules.ia: Implementa un encabezado con un título como "Tus Tareas Inteligentes" y un icono de lista de tareas de Lucide Icons. Incluye también un botón para "Añadir Nueva Tarea" (con el color secundario #10b981). El encabezado debe tener un borde inferior sutil (ej., border-b border-neutral-200).
// @.cursorrules.ia: Crea un cuerpo donde se listarán las tareas del usuario. Inicialmente, muestra un mensaje si no hay tareas ("No tienes tareas pendientes. ¡Pregunta al asistente para crear una!"). Cada tarea debe mostrar su título, estado (pendiente/completada - simula con un checkbox), y posiblemente una prioridad (visualizada con un color o icono).
// @.cursorrules.ia: Considera la posibilidad de filtrar o ordenar las tareas (ej., por prioridad, fecha de creación).
// @.cursorrules.ia: Permite la interacción con las tareas (marcar como completada, editar - la funcionalidad de edición se implementará en fases posteriores).
// @.cursorrules.ia: Considera un diseño responsive y la modularización de la lista de tareas en subcomponentes para cada tarea individual.
// @.cursorrules.ia: Documenta con comentarios claros la estructura y el propósito de cada parte del componente.
Layout Principal del Módulo (frontend/src/app/dashboard/ai-assistant/page.tsx)
```
```TypeScript

// @.cursorrules.ia: Crea una página de Next.js llamada page.tsx dentro del directorio frontend/src/app/dashboard/ai-assistant/.
// @.cursorrules.ia: Utiliza Tailwind CSS para el layout. El componente debe tener un display flex para organizar los paneles uno al lado del otro.
// @.cursorrules.ia: Importa y renderiza el componente AiChatPanel a la izquierda, ocupando aproximadamente el 60% del ancho.
// @.cursorrules.ia: Importa y renderiza el componente TaskManagementPanel a la derecha, ocupando aproximadamente el 40% del ancho.
// @.cursorrules.ia: Asegura que ambos paneles tengan una altura del 100% del viewport (h-screen).
// @.cursorrules.ia: Considera un diseño responsive para ajustar los anchos de los paneles en diferentes tamaños de pantalla.
// @.cursorrules.ia: Documenta con comentarios claros la estructura del layout.
Estilos Globales y de Componentes (frontend/src/styles/globals.css y/o archivos CSS de los componentes)
CSS
```
```
/* @.cursorrules.ia: Asegúrate de que Tailwind CSS esté correctamente configurado en los estilos globales (globals.css). */
/* @.cursorrules.ia: Define estilos base para la tipografía, colores de fondo y texto que se alineen con la paleta de colores de SoulDream (Primary: #4f46e5, Secondary: #10b981, Backgrounds: #f8fafc para claro, #0f172a para oscuro). */
/* @.cursorrules.ia: En los archivos CSS de los componentes (si es necesario), añade estilos específicos para la apariencia del chat (burbujas, espaciado, etc.) y la lista de tareas (diseño de cada item, estados, etc.). */
/* @.cursorrules.ia: Utiliza las clases de utilidad de Tailwind CSS siempre que sea posible para mantener la consistencia y facilitar la responsividad. */
Consideraciones Adicionales para la Integración en SoulDream:
```
Contexto del Usuario: Este módulo deberá acceder al estado global de la aplicación (gestionado con Zustand) para obtener información del usuario actual y sus datos (metas, tareas existentes).
Interacción con la IA: La lógica para enviar mensajes al backend (FastAPI a través de OpenRouter) y recibir respuestas de la IA se implementará utilizando React Query para la gestión de datos del servidor dentro del AiChatPanel.
Gestión de Tareas: La interacción con las tareas (listar, crear, marcar como completadas) requerirá llamadas a la API del backend (FastAPI y Supabase) gestionadas también con React Query dentro del TaskManagementPanel.
Estado Compartido: Si es necesario compartir información entre el AiChatPanel y el TaskManagementPanel (ej., cuando la IA crea una nueva tarea), se utilizará Zustand para la gestión del estado global.
Diseño y UX: Se deberán seguir los principios de diseño y UX definidos para SoulDream, asegurando flujos intuitivos, feedback visual y una experiencia de usuario coherente.
Iconografía: Utiliza los iconos de Lucide Icons de manera consistente en ambos paneles para las acciones y la representación visual.